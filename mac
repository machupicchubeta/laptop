#!/bin/bash
set -eu
cd "$HOME"

echo "Enable to sudo authenticate with touch id"
bash <(curl -fsSL https://raw.githubusercontent.com/machupicchubeta/dotfiles/main/bin/enable_to_sudo_authenticate_with_touch_id.sh)

echo "Generate key pair"
if [ ! -e "$HOME/.ssh/id_rsa" ]; then
  read -p "email: " email
  ssh-keygen -t rsa -b 4096 -C $email
  eval "$(ssh-agent -s)"
  ssh-add -K "$HOME/.ssh/id_rsa"
fi

echo "Install Homebrew"
if [ ! -x "$(command -v brew)" ]; then
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
fi

echo "Install commands and Apps"
bash <(curl -fsSL https://raw.githubusercontent.com/machupicchubeta/dotfiles/main/bin/brewfile.sh)

echo "Install oh-my-zsh"
if [ ! -d "$HOME/.oh-my-zsh" ]; then
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" "" --unattended
fi

echo "Create tmp directory"
if [ ! -d "$HOME/tmp" ]; then
  mkdir "$HOME/tmp"
fi

echo "Create own Applications directory"
if [ ! -d "$HOME/Applications" ]; then
  mkdir "$HOME/Applications"
fi

echo "Change screencapture store directory"
SCREENSHOTS_PATH="$HOME/Screenshots"
if [ ! -d "$SCREENSHOTS_PATH" ]; then
  mkdir "$SCREENSHOTS_PATH"
fi
defaults write com.apple.screencapture location "$SCREENSHOTS_PATH"
killall SystemUIServer

echo "Copy SFMono fonts to User font directory"
TERMINAL_APP_PATH=""
if [ -d "/System/Applications/Utilities/Terminal.app" ]; then
  TERMINAL_APP_PATH="/System/Applications/Utilities/Terminal.app"
elif [ -d "/Applications/Utilities/Terminal.app" ]; then
  TERMINAL_APP_PATH="/Applications/Utilities/Terminal.app"
fi
if [ -n "$TERMINAL_APP_PATH" ]; then
  cp -f $TERMINAL_APP_PATH/Contents/Resources/Fonts/*.otf $HOME/Library/Fonts/
fi

echo "Download settings and themes"
REPOSITORIES_PATH="$HOME/Repositories"
if [ ! -d "$REPOSITORIES_PATH" ]; then
  mkdir "$REPOSITORIES_PATH"
fi
export GHQ_ROOT=$REPOSITORIES_PATH
ghq get -u github.com/machupicchubeta/laptop
ghq get -u github.com/machupicchubeta/dotfiles
ghq get -u github.com/machupicchubeta/diceware
ghq get -u github.com/altercation/solarized
ghq get -u github.com/mbadolato/iTerm2-Color-Schemes
ghq get -u github.com/seebi/dircolors-solarized
ghq get -u github.com/erikw/tmux-powerline
ghq get -u gist.github.com/4979906
ghq get -u github.com/tony/tmux-config

echo "Put settings"
GITHUB_REPOSITORIES_PATH="$REPOSITORIES_PATH/github.com"
SETTINGS_PATH="$GITHUB_REPOSITORIES_PATH/machupicchubeta/dotfiles"
for dot_directory in $(find $SETTINGS_PATH/.* -type d -d 0 ! -path "$SETTINGS_PATH/." ! -path "$SETTINGS_PATH/.." ! -path "$SETTINGS_PATH/.git"); do
  dot_directory_name=$(basename "$dot_directory")
  if [ -L "$HOME/$dot_directory_name" ]; then
    unlink "$HOME/$dot_directory_name"
  fi
  if [ -e "$HOME/$dot_directory_name" ]; then
    mv "$HOME/$dot_directory_name" "$HOME/$dot_directory_name"_"$(date +%Y-%m-%dT%H:%M:%S%z)"
  fi
  ln -s "$dot_directory" "$HOME/$dot_directory_name"
done
: ${XDG_CONFIG_HOME:=$HOME/.config}
if [ ! -d "$XDG_CONFIG_HOME" ]; then
  mkdir "$XDG_CONFIG_HOME"
fi
if [ -L "$XDG_CONFIG_HOME/nvim" ]; then
  unlink "$XDG_CONFIG_HOME/nvim"
fi
ln -s "$SETTINGS_PATH/.vim" "$XDG_CONFIG_HOME/nvim"
for dot_file in $(find "$GITHUB_REPOSITORIES_PATH"/machupicchubeta/dotfiles/.* -type f -d 0); do
  dot_filename=$(basename "$dot_file")
  if [ -L "$HOME/$dot_filename" ]; then
    unlink "$HOME/$dot_filename"
  fi
  if [ -e "$HOME/$dot_filename" ]; then
    mv "$HOME/$dot_filename" "$HOME/$dot_filename"_"$(date +%Y-%m-%dT%H:%M:%S%z)"
  fi
  ln -s "$dot_file" "$HOME/$dot_filename"
done
if [ -L /etc/my.cnf ]; then
  sudo unlink /etc/my.cnf
fi
if [ -e /etc/my.cnf ]; then
  sudo mv /etc/my.cnf /etc/my.cnf_"$(date +%Y-%m-%dT%H:%M:%S%z)"
fi
sudo ln -s "$SETTINGS_PATH/mysql/my-utf8mb4.cnf" /etc/my.cnf
if [ -L "$HOME/.zshrc.pre-oh-my-zsh" ]; then
  unlink "$HOME/.zshrc.pre-oh-my-zsh"
fi
RBENV_PATH="$HOME/.rbenv"
if [ ! -d "$RBENV_PATH" ]; then
  mkdir "$RBENV_PATH"
fi
if [ -L "$RBENV_PATH/default-gems" ]; then
  unlink "$RBENV_PATH/default-gems"
fi
ln -s "$SETTINGS_PATH/rbenv/default-gems" "$RBENV_PATH/default-gems"

echo "Put script files"
BIN_PATH="$HOME/bin"
if [ ! -d "$BIN_PATH" ]; then
  mkdir "$BIN_PATH"
fi
for bin_file in "$GITHUB_REPOSITORIES_PATH"/machupicchubeta/dotfiles/bin/*; do
  bin_filename=$(basename "$bin_file")
  if [ -L "$BIN_PATH/$bin_filename" ]; then
    unlink "$BIN_PATH/$bin_filename"
  fi
  if [ -e "$BIN_PATH/$bin_filename" ]; then
    mv "$BIN_PATH/$bin_filename" "$BIN_PATH/$bin_filename"_"$(date +%Y-%m-%dT%H:%M:%S%z)"
  fi
  ln -s "$bin_file" "$BIN_PATH/$bin_filename"
done
if [ -L "$BIN_PATH/diceware.rb" ]; then
  unlink "$BIN_PATH/diceware.rb"
fi
ln -s "$GITHUB_REPOSITORIES_PATH/machupicchubeta/diceware/diceware.rb" "$BIN_PATH/diceware.rb"
if [ -L "$BIN_PATH/diceware.wordlist.asc" ]; then
  unlink "$BIN_PATH/diceware.wordlist.asc"
fi
ln -s "$GITHUB_REPOSITORIES_PATH/machupicchubeta/diceware/diceware.wordlist.asc" "$BIN_PATH/diceware.wordlist.asc"

echo "Load compiler options"
COMPILER_OPTIONS_PATH="$HOME/.dotfiles/.exports_compiler_options"
if [ -r "$COMPILER_OPTIONS_PATH" ]; then
  source "$COMPILER_OPTIONS_PATH"
fi

echo "Setup Ruby"
bash <(curl -fsSL https://raw.githubusercontent.com/machupicchubeta/dotfiles/main/bin/setup_ruby.sh)

echo "Setup Python"
bash <(curl -fsSL https://raw.githubusercontent.com/machupicchubeta/dotfiles/main/bin/setup_python.sh)

echo "Setup Perl"
bash <(curl -fsSL https://raw.githubusercontent.com/machupicchubeta/dotfiles/main/bin/setup_perl.sh)

echo "Setup Java"
bash <(curl -fsSL https://raw.githubusercontent.com/machupicchubeta/dotfiles/main/bin/setup_java.sh)

echo "Setup Node.js"
bash <(curl -fsSL https://raw.githubusercontent.com/machupicchubeta/dotfiles/main/bin/setup_nodejs.sh)

echo "Setup Go"
bash <(curl -fsSL https://raw.githubusercontent.com/machupicchubeta/dotfiles/main/bin/setup_go.sh)

echo "Apply private settings"
if [ -f "$HOME/.laptop.local" ]; then
  . "$HOME/.laptop.local"
fi

echo "Use zsh installed via Homebrew as default shell"
if [ $SHELL != $(which zsh) ]; then
  echo "$(which zsh)" | sudo tee -a /etc/shells
  chsh -s $(which zsh)
fi
if which direnv > /dev/null; then direnv allow; fi
