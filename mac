#!/bin/bash
set -eu
cd "$HOME"

echo "Enable to sudo authenticate with touch id"
bash <(curl -fsSL https://raw.githubusercontent.com/machupicchubeta/dotfiles/main/bin/enable_to_sudo_authenticate_with_touch_id.sh)

echo -e "\nGenerate key pair"
if [ ! -e "$HOME/.ssh/id_rsa" ]; then
  echo 'Enter email:'
  read -r email
  ssh-keygen -t rsa -b 4096 -C "$email"
  eval "$(ssh-agent -s)"
  ssh-add -K "$HOME/.ssh/id_rsa"
fi

echo -e "\nSetup Command Line Tools"
bash <(curl -fsSL https://raw.githubusercontent.com/machupicchubeta/dotfiles/main/bin/setup_command_line_tools.sh)

echo -e "\nInstall Homebrew"
if [ ! -x "$(command -v brew)" ]; then
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
fi

echo -e "\nInstall commands and Apps"
bash <(curl -fsSL https://raw.githubusercontent.com/machupicchubeta/dotfiles/main/bin/brewfile.sh)

echo -e "\nCreate tmp directory"
if [ ! -d "$HOME/tmp" ]; then
  mkdir "$HOME/tmp"
fi

echo -e "\nCreate own Applications directory"
if [ ! -d "$HOME/Applications" ]; then
  mkdir "$HOME/Applications"
fi

echo -e "\nChange screencapture store directory"
SCREENSHOTS_PATH="$HOME/Screenshots"
if [ ! -d "$SCREENSHOTS_PATH" ]; then
  mkdir "$SCREENSHOTS_PATH"
fi
defaults write com.apple.screencapture location "$SCREENSHOTS_PATH"
killall SystemUIServer

echo -e "\nCopy SFMono fonts to User font directory"
TERMINAL_APP_PATH=""
if [ -d "/System/Applications/Utilities/Terminal.app" ]; then
  TERMINAL_APP_PATH="/System/Applications/Utilities/Terminal.app"
elif [ -d "/Applications/Utilities/Terminal.app" ]; then
  TERMINAL_APP_PATH="/Applications/Utilities/Terminal.app"
fi
if [ -n "$TERMINAL_APP_PATH" ]; then
  cp -f $TERMINAL_APP_PATH/Contents/Resources/Fonts/*.otf "$HOME"/Library/Fonts/
fi

echo -e "\nDownload settings and themes"
REPOSITORIES_PATH="$HOME/Repositories"
if [ ! -d "$REPOSITORIES_PATH" ]; then
  mkdir "$REPOSITORIES_PATH"
fi
export GHQ_ROOT=$REPOSITORIES_PATH
ghq get --update --parallel github.com/machupicchubeta/laptop
ghq get --update --parallel github.com/machupicchubeta/dotfiles
ghq get --update --parallel github.com/machupicchubeta/diceware
ghq get --update --parallel github.com/altercation/solarized
ghq get --update --parallel github.com/mbadolato/iTerm2-Color-Schemes
ghq get --update --parallel github.com/seebi/dircolors-solarized
ghq get --update --parallel gist.github.com/4979906
ghq get --update --parallel github.com/tony/tmux-config
ghq get --update --parallel github.com/k0kubun/dotfiles

echo -e "\nPut settings"
GITHUB_REPOSITORIES_PATH="$REPOSITORIES_PATH/github.com"
SETTINGS_PATH="$GITHUB_REPOSITORIES_PATH/machupicchubeta/dotfiles"
find "$SETTINGS_PATH"/.* -maxdepth 0 -type d ! -path "$SETTINGS_PATH/." ! -path "$SETTINGS_PATH/.." ! -path "$SETTINGS_PATH/.git" -exec sh -c '
    dot_directory=$1
    dot_directory_name=$(basename "$dot_directory")
    if [ -L "$HOME/$dot_directory_name" ]; then
      unlink "$HOME/$dot_directory_name"
    fi
    if [ -e "$HOME/$dot_directory_name" ]; then
      mv "$HOME/$dot_directory_name" "$HOME"/"$dot_directory_name"_"$(date +%Y-%m-%dT%H:%M:%S%z)"
    fi
    ln -s "$dot_directory" "$HOME/$dot_directory_name"
  ' sh {} \;
: "${XDG_CONFIG_HOME:=$HOME/.config}"
if [ ! -d "$XDG_CONFIG_HOME" ]; then
  mkdir "$XDG_CONFIG_HOME"
fi
if [ -L "$XDG_CONFIG_HOME/nvim" ]; then
  unlink "$XDG_CONFIG_HOME/nvim"
fi
ln -s "$SETTINGS_PATH/.vim" "$XDG_CONFIG_HOME/nvim"
if [ -L "$XDG_CONFIG_HOME/starship.toml" ]; then
  unlink "$XDG_CONFIG_HOME/starship.toml"
fi
ln -s "$SETTINGS_PATH/config/starship.toml" "$XDG_CONFIG_HOME/starship.toml"
if [ ! -d "$XDG_CONFIG_HOME/lsd" ]; then
  mkdir "$XDG_CONFIG_HOME/lsd"
fi
if [ -L "$XDG_CONFIG_HOME/lsd/config.yaml" ]; then
  unlink "$XDG_CONFIG_HOME/lsd/config.yaml"
fi
ln -s "$SETTINGS_PATH/config/lsd/config.yaml" "$XDG_CONFIG_HOME/lsd/config.yaml"
if [ ! -d "$XDG_CONFIG_HOME/sheldon" ]; then
  mkdir "$XDG_CONFIG_HOME/sheldon"
fi
if [ -L "$XDG_CONFIG_HOME/sheldon/plugins.toml" ]; then
  unlink "$XDG_CONFIG_HOME/sheldon/plugins.toml"
fi
if [ -e "$XDG_CONFIG_HOME/sheldon/plugins.toml" ]; then
  mv "$XDG_CONFIG_HOME/sheldon/plugins.toml" "$XDG_CONFIG_HOME"/sheldon/plugins."$(date +%Y-%m-%dT%H:%M:%S%z)".toml
fi
ln -s "$SETTINGS_PATH/config/sheldon/plugins.toml" "$XDG_CONFIG_HOME/sheldon/plugins.toml"
find "$GITHUB_REPOSITORIES_PATH"/machupicchubeta/dotfiles/.* -maxdepth 0 -type f -exec sh -c '
    dot_file=$1
    dot_filename=$(basename "$dot_file")
    if [ -L "$HOME/$dot_filename" ]; then
      unlink "$HOME/$dot_filename"
    fi
    if [ -e "$HOME/$dot_filename" ]; then
      mv "$HOME/$dot_filename" "$HOME"/"$dot_filename"_"$(date +%Y-%m-%dT%H:%M:%S%z)"
    fi
    ln -s "$dot_file" "$HOME/$dot_filename"
  ' sh {} \;
if [ -L "$HOME/.irbrc" ]; then
  unlink "$HOME/.irbrc"
fi
ln -s "$GITHUB_REPOSITORIES_PATH/k0kubun/dotfiles/config/.irbrc" "$HOME/.irbrc"
if [ -L /etc/my.cnf ]; then
  sudo unlink /etc/my.cnf
fi
if [ -e /etc/my.cnf ]; then
  sudo mv /etc/my.cnf /etc/my.cnf_"$(date +%Y-%m-%dT%H:%M:%S%z)"
fi
sudo ln -s "$SETTINGS_PATH/mysql/my-utf8mb4.cnf" /etc/my.cnf
RBENV_PATH="$HOME/.rbenv"
if [ ! -d "$RBENV_PATH" ]; then
  mkdir "$RBENV_PATH"
fi
if [ -L "$RBENV_PATH/default-gems" ]; then
  unlink "$RBENV_PATH/default-gems"
fi
ln -s "$SETTINGS_PATH/rbenv/default-gems" "$RBENV_PATH/default-gems"

echo -e "\nPut script files"
BIN_PATH="$HOME/bin"
if [ ! -d "$BIN_PATH" ]; then
  mkdir "$BIN_PATH"
fi
for bin_file in "$GITHUB_REPOSITORIES_PATH"/machupicchubeta/dotfiles/bin/*; do
  bin_filename=$(basename "$bin_file")
  if [ -L "$BIN_PATH/$bin_filename" ]; then
    unlink "$BIN_PATH/$bin_filename"
  fi
  if [ -e "$BIN_PATH/$bin_filename" ]; then
    mv "$BIN_PATH/$bin_filename" "$BIN_PATH"/"$bin_filename"_"$(date +%Y-%m-%dT%H:%M:%S%z)"
  fi
  ln -s "$bin_file" "$BIN_PATH/$bin_filename"
done
if [ -L "$BIN_PATH/diceware.rb" ]; then
  unlink "$BIN_PATH/diceware.rb"
fi
ln -s "$GITHUB_REPOSITORIES_PATH/machupicchubeta/diceware/diceware.rb" "$BIN_PATH/diceware.rb"
if [ -L "$BIN_PATH/diceware.wordlist.asc" ]; then
  unlink "$BIN_PATH/diceware.wordlist.asc"
fi
ln -s "$GITHUB_REPOSITORIES_PATH/machupicchubeta/diceware/diceware.wordlist.asc" "$BIN_PATH/diceware.wordlist.asc"

echo -e "\nLoad environment variables"
ENVIRONMENT_VARIABLES_PATH="$HOME/.zsh/variables.zsh"
if [ -r "$ENVIRONMENT_VARIABLES_PATH" ]; then
  # shellcheck source=/dev/null
  source "$ENVIRONMENT_VARIABLES_PATH"
fi

echo -e "\nSetup Ruby"
bash <(curl -fsSL https://raw.githubusercontent.com/machupicchubeta/dotfiles/main/bin/setup_ruby.sh)

echo -e "\nSetup Python"
bash <(curl -fsSL https://raw.githubusercontent.com/machupicchubeta/dotfiles/main/bin/setup_python.sh)

echo -e "\nSetup Perl"
bash <(curl -fsSL https://raw.githubusercontent.com/machupicchubeta/dotfiles/main/bin/setup_perl.sh)

echo -e "\nSetup Java"
bash <(curl -fsSL https://raw.githubusercontent.com/machupicchubeta/dotfiles/main/bin/setup_java.sh)

echo -e "\nSetup Node.js"
bash <(curl -fsSL https://raw.githubusercontent.com/machupicchubeta/dotfiles/main/bin/setup_nodejs.sh)

echo -e "\nSetup Go"
bash <(curl -fsSL https://raw.githubusercontent.com/machupicchubeta/dotfiles/main/bin/setup_go.sh)

echo -e "\nSetup Rust"
bash <(curl -fsSL https://raw.githubusercontent.com/machupicchubeta/dotfiles/main/bin/setup_rust.sh)

echo -e "\nSetup Terraform"
bash <(curl -fsSL https://raw.githubusercontent.com/machupicchubeta/dotfiles/main/bin/setup_terraform.sh)

echo -e "\nApply private settings"
if [ -f "$HOME/.laptop.local" ]; then
  # shellcheck source=/dev/null
  . "$HOME/.laptop.local"
fi

echo -e "\nUse zsh installed via Homebrew as default shell"
if [ "$SHELL" != "$(which zsh)" ]; then
  command -v zsh | sudo tee -a /etc/shells
  chsh -s "$(which zsh)"
fi
if which direnv > /dev/null; then direnv allow; fi
